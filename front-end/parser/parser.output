Terminals unused in grammar

   CHARLIT
   STRING
   INDSEL
   PLUSPLUS
   MINUSMINUS
   SHL
   SHR
   LTEQ
   GTEQ
   EQEQ
   NOTEQ
   LOGAND
   LOGOR
   ELLIPSIS
   TIMESEQ
   DIVEQ
   MODEQ
   PLUSEQ
   MINUSEQ
   SHLEQ
   SHREQ
   ANDEQ
   OREQ
   XOREQ
   AUTO
   BREAK
   CASE
   CHAR
   CONST
   CONTINUE
   DEFAULT
   DO
   DOUBLE
   ELSE
   ENUM
   EXTERN
   FLOAT
   FOR
   GOTO
   IF
   INLINE
   INT
   LONG
   REGISTER
   RESTRICT
   RETURN
   SHORT
   SIGNED
   SIZEOF
   STATIC
   STRUCT
   SWITCH
   TYPEDEF
   UNION
   UNSIGNED
   VOID
   VOLATILE
   WHILE
   _BOOL
   _COMPLEX
   _IMAGINARY


Grammar

    0 $accept: assn $end

    1 assn: IDENT '=' expr

    2 expr: NUMBER
    3     | expr '+' NUMBER


Terminals, with rules where they appear

$end (0) 0
'+' (43) 3
'=' (61) 1
error (256)
IDENT (258) 1
CHARLIT (259)
STRING (260)
NUMBER (261) 2 3
INDSEL (262)
PLUSPLUS (263)
MINUSMINUS (264)
SHL (265)
SHR (266)
LTEQ (267)
GTEQ (268)
EQEQ (269)
NOTEQ (270)
LOGAND (271)
LOGOR (272)
ELLIPSIS (273)
TIMESEQ (274)
DIVEQ (275)
MODEQ (276)
PLUSEQ (277)
MINUSEQ (278)
SHLEQ (279)
SHREQ (280)
ANDEQ (281)
OREQ (282)
XOREQ (283)
AUTO (284)
BREAK (285)
CASE (286)
CHAR (287)
CONST (288)
CONTINUE (289)
DEFAULT (290)
DO (291)
DOUBLE (292)
ELSE (293)
ENUM (294)
EXTERN (295)
FLOAT (296)
FOR (297)
GOTO (298)
IF (299)
INLINE (300)
INT (301)
LONG (302)
REGISTER (303)
RESTRICT (304)
RETURN (305)
SHORT (306)
SIGNED (307)
SIZEOF (308)
STATIC (309)
STRUCT (310)
SWITCH (311)
TYPEDEF (312)
UNION (313)
UNSIGNED (314)
VOID (315)
VOLATILE (316)
WHILE (317)
_BOOL (318)
_COMPLEX (319)
_IMAGINARY (320)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
assn (69)
    on left: 1, on right: 0
expr (70)
    on left: 2 3, on right: 1 3


State 0

    0 $accept: . assn $end

    IDENT  shift, and go to state 1

    assn  go to state 2


State 1

    1 assn: IDENT . '=' expr

    '='  shift, and go to state 3


State 2

    0 $accept: assn . $end

    $end  shift, and go to state 4


State 3

    1 assn: IDENT '=' . expr

    NUMBER  shift, and go to state 5

    expr  go to state 6


State 4

    0 $accept: assn $end .

    $default  accept


State 5

    2 expr: NUMBER .

    $default  reduce using rule 2 (expr)


State 6

    1 assn: IDENT '=' expr .
    3 expr: expr . '+' NUMBER

    '+'  shift, and go to state 7

    $default  reduce using rule 1 (assn)


State 7

    3 expr: expr '+' . NUMBER

    NUMBER  shift, and go to state 8


State 8

    3 expr: expr '+' NUMBER .

    $default  reduce using rule 3 (expr)
